<!--
 ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->
<%
include("/model/common.jag");

if (request.isSecure()) {//check whether the request is secure or not

    var authentication = require("/assets/authentication.js");
    var username = request.getParameter("username");
    var password = request.getParameter("password");
    var requestUrl = request.getHeader("Referer").split("requestUrl=")[1];
    if(requestUrl != null && requestUrl != "null"){
        requestUrl = requestUrl.replace("%3F", "?");
    }
    if(requestUrl == null || requestUrl == "null" || requestUrl == ""){
        requestUrl = "stats";
    }
    var authSuccess=false;
    var USER='user',
        AUTH='auth',
        AUTH_SUCCESS='authSuccess',
        ROLES='roles';
    
    try{
        if(username == "" || password == ""){
            authSuccess = false;
        } else{
            try {
                if(domainCorrect(username, bpsHost)) {
                    authSuccess = authentication.authenticate(username,password,httpServiceUrl);
                    authSuccess = HTTPAuthenticate(username, password, bpsHost);
                }
            } catch (e) {
                log.error('Error occured while connecting to the back-end BPS AuthenticationAdmin service : ');
                log.error(e);
                authSuccess = false;
            }
        }
        if(!authSuccess){
            session.put("loginFailed" ,true);
            response.sendRedirect(requestUrl);
        } else {
            var roles = authentication.getRoles(username,password,httpServiceUrl);
            var encoder = require("/assets/encoder.js");
            var auth = encoder.encode(username+':'+password);
            session.put(AUTH_SUCCESS, authSuccess);
            session.put(AUTH, auth);
            session.put(USER, username);
            session.put(ROLES ,roles);
            response.sendRedirect(requestUrl);
        }
    
    }catch(e){
        log.error(e);
        session.put("loginFailed" ,true);
        response.sendRedirect(requestUrl);
    }

} else {
    //request is not secured, therefore need redirect to the secure channel
    var queryStr = '';
    if (request.getQueryString() != null) {
        queryStr = '?' + request.getQueryString();
    }
    response.sendRedirect(application.get('serverAddress') + request.getRequestURI() + queryStr);
}

    /**
     * function to make login request to AuthenticationAdmin
     * @param username username of user
     * @param password password of user
     * @param remoteAddr target url
     * @return true if success otherwise false
     */
    function HTTPAuthenticate(username, password, remoteAddr) {

        var httpAuth = new XMLHttpRequest();
        var endPoint = httpServiceUrl + '/services/AuthenticationAdmin.AuthenticationAdminHttpsSoap11Endpoint/';

        httpAuth.open('POST', endPoint, false);
        httpAuth.setRequestHeader('SOAPAction', 'urn:login');
        httpAuth.setRequestHeader('Content-Type','text/xml');

        var payload = '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:aut="http://authentication.services.core.carbon.wso2.org">\
                            <soapenv:Header/>\
                                <soapenv:Body>\
                                    <aut:login>\
                                        <aut:username>' +username +'</aut:username>\
                                        <aut:password>' +password +'</aut:password>\
                                        <aut:remoteAddress>' +remoteAddr +'</aut:remoteAddress>\
                                    </aut:login>\
                            </soapenv:Body>\
                        </soapenv:Envelope>';


        httpAuth.send(payload);
        var BPSResponse = httpAuth.responseText;
        if (log.isDebugEnabled()) {
            log.debug('Login RESPONSE:' + httpAuth.responseText);
        }

        var returnStart = BPSResponse.indexOf('<ns:return>') + '<ns:return>'.length;
        var returnEnd = BPSResponse.indexOf('</ns:return>');
        var isLoginSuccess = BPSResponse.substring(returnStart, returnEnd);

        if (log.isDebugEnabled()) {
            log.debug('Login Success:' + isLoginSuccess);
        }

        if (isLoginSuccess === 'true') {
            //retrieve session cookie with BPS and store in session
            var cookie = httpAuth.getResponseHeader('Set-Cookie').split(';')[0];
            session.put('BPSSessionCookie' , cookie);

            return true;
        } else {
            if (log.isDebugEnabled()) {
                log.debug('Login in to BPS Failed');
            }
            return false;
        }

    }

    /**
     * function to check the given user domain is in the current tenant domain. Required for securing tenant isolation
     * @param username username of user
     * @param remoteAddr target url
     * @return true if success otherwise false
     */
    function domainCorrect(username, remoteAddress) {
        try{
            var user = carbon.server.tenantUser(username);

            if (JSON.stringify(user.tenantId)  != bpsTenantID) {
                if (log.isDebugEnabled()) {
                    log.debug('Login in to BPS Failed, invalid tenant domain.');
                }
                return false;
            }
            return true;
        } catch(e) {
            log.error(e);
            session.put("loginFailed" ,true);
            response.sendRedirect(requestUrl);
        }
    }
%>
