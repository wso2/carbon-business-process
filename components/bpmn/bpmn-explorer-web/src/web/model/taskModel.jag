<!--
 ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->
<%
var id = request.getParameter("id");
var log = new Log();
var start = 0;
var MAX_SIZE = 10; //Max count of data per page

var headers = {"Authorization": "Basic " + auth,
    "Content-Type": "application/json",
    "Accept" : "application/json"
};

try {
    var carbon = require('carbon');

    var task = get(httpUrl + "/bpmn/runtime/tasks/" + id, null, headers, "json").data;

    if (log.isDebugEnabled()) {
        log.debug("BPS BPMN REST API request: " + httpUrl + "/bpmn/task/" + id);
        log.debug("BPS BPMN REST API response: " + stringify(task));
    }

    //Check for error response
    if (task.errorMessage != undefined) {
        throw "Error " + task.statusCode + " : " + task.errorMessage;
    }

    //for attachments table
    var pagination = request.getParameter("pagination");
    if (pagination == null || pagination == "") {
        pagination = 1;
    }
    if (pagination > 0) {
        start = (pagination - 1) * 10;
    }

    var attachments = get(httpUrl + "/bpmn/runtime/tasks/" + id + "/attachments", null, headers, "json").data;

    if (log.isDebugEnabled()) {
        log.debug("BPS BPMN REST request: "+ httpUrl + "/bpmn/runtime/tasks/" + id + "/attachments");
        log.debug("BPS BPMN REST API response: " +stringify(attachments));
    }

    //Check for error response
    if (attachments.errorMessage != undefined) {
        throw "Error " + attachments.statusCode + " : " + attachments.errorMessage;
    }

    var attachmentList = [];
    if (attachments) {
        for (var i = start; (i < attachments.attachmentResponseList.length) && (i < start + 10); i++) {
            var attachmentId = JSON.parse(attachments.attachmentResponseList[i].id);
            var attachmentName = attachments.attachmentResponseList[i].name;
            var attachmentType = attachments.attachmentResponseList[i].type;
            var contentUrl = attachments.attachmentResponseList[i].contentUrl;

            //
            attachmentList.push({
                id: attachmentId,
                name: attachmentName,
                type: attachmentType,
                url: contentUrl
            });

        }

        var attachmentCount = attachments.attachmentResponseList.length;
        var paginatePageCount = Math.ceil(attachmentCount / 10);

    } else {
        if (log.isDebugEnabled()) {
            log.debug("No attachments found for task" + id);
        }
    }

    //get task meta info
    var taskInfo = get(httpUrl + "/bpmn/runtime/tasks/" + id, null, headers, "json").data;

    if (log.isDebugEnabled()) {
        log.debug("BPS BPMN REST request:"+ httpUrl + "/bpmn/runtime/tasks/" + id);
        log.debug("BPS BPMN REST API response: " +stringify(taskInfo));
    }

    //Check for error response
    if (taskInfo.errorMessage != undefined) {
        throw "Error " + taskInfo.statusCode + " : " + taskInfo.errorMessage;
    }

    var taskDesc = task.description;
    if (taskDesc == null) {
        taskDesc = "Description not available";
    }
    var taskOwner = task.owner;
    if (taskOwner == null) {
        taskOwner = "Not available";
    }
    var taskName = task.name;
    if (taskName == null) {
        taskName = "Not available";
    }
    var processState = 'ACTIVE';
    var taskInputsDisabled = ''; // this is used to disable user inputs when process instance is in suspended state
    if (taskInfo.suspended === true) {
        processState = 'SUSPENDED';
        taskInputsDisabled = 'disabled';
    }
    var taskData = {
        id: task.id,
        processInstanceId: task.processInstanceId,
        processState: processState,
        name: taskName,
        desc: taskDesc,
        priority: task.priority,
        pid: task.processDefinitionId,
        owner: taskOwner,
        assignee: task.assignee,
        subtask: task.subtaskList
    };
    var formGenTool = require("/assets/dynamicFormGen.js");
    var formData = get(httpUrl + "/bpmn/form/form-data/?taskId=" + id, null, headers, "json").data;

    if (log.isDebugEnabled()) {
        log.debug("BPS BPMN REST request:"+ httpUrl + "/bpmn/form/" + id + "/properties");
        log.debug("BPS BPMN REST API response: " +stringify(formData));
    }

    //Check for error response
    if (formData.errorMessage != undefined) {
        throw "Error " + formData.statusCode + " : " + formData.errorMessage;
    }
    var formContent = formGenTool.generateForm(formData.formProperties, false);

} catch (e) {
    if (log.isDebugEnabled()) {
        log.debug("User Error Occured : " + e);
    }
    //Enable and display error in common error display area in view
    commonErrorMessage = getCommonErrorContent(e);
    errorDisplayEnable = '';
}
%>