<!--
 ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->
<%
var wsRequest = require ('/assets/wsRequest.js');
wsRequest.initHTServerInfo(httpServiceUrl, session.get('BPSSessionCookie'));

var pagination = request.getParameter("pagination");
if (pagination == null || pagination == ""){
	pagination = 1;
}
var start = 0;
if(pagination > 0){
	start = (pagination - 1)*10 ;
}
var headers = {"Authorization":"Basic " + auth};

/* REMOVE REPEATING REST CALLS NOT NEED TO CALL FIRST CALL SINCE TOTAL PROCESS COUNT IS IN THE RESPONSE
var processCount = get( httpUrl + "/bpmn/repository/process-definitions" ,null, headers, "json" ).data.total;
var paginatePageCount = Math.ceil(processCount / 10);

if (log.isDebugEnabled()) {
    log.debug("BPS BPMN REST request:"+ httpUrl + "/bpmn/repository/process-definitions");
    log.debug("BPS BPMN REST API response: " +stringify(processCount));
}

var paginatePageCount = Math.ceil(processCount.total / 10);
*/
try {
    var list = [];

    //retrieve deployement list
    var deploymentListHTTPResponse = get( httpUrl + "/bpmn/repository/deployments?tenantId=" + bpsTenantID+ "&start="+ start, null, headers, "json" );
    if (log.isDebugEnabled()) {
        log.debug("BPS BPMN REST request:" + httpUrl + "/bpmn/repository/deployments?tenantId=" + bpsTenantID);
        log.debug("BPS BPMN REST API response:" +stringify(deploymentListHTTPResponse.data));
    }
    //Check for error response
    if (deploymentListHTTPResponse.xhr.status != 200) {
        throw "Error " + deploymentListHTTPResponse.data.statusCode + " : " + deploymentListHTTPResponse.data.errorMessage;
    }

    var deploymentList = deploymentListHTTPResponse.data;

    var paginatePageCount = Math.ceil(deploymentList.total / 10);

    for (var j=0; j<deploymentList.data.length; j++) {
        //retrieve processes belong to deployement (here we assume maximum processes packaged within one deployement is limited to 100)
        var processesHTTPResponse = get( httpUrl + "/bpmn/repository/process-definitions?sort=name&start=0&size=100&order=asc&deploymentId="
                                                                                    + deploymentList.data[j].id, null, headers, "json" );
        if (log.isDebugEnabled()) {
            log.debug("BPS BPMN REST request:" + httpUrl + "/bpmn/repository/process-definitions?sort=name&start=0&size=100&order=asc&deploymentId="
                                                                                                                + deploymentList.data[j].id);
            log.debug("BPS BPMN REST API response:" +stringify(processesHTTPResponse.data));
        }
        //Check for error response
        if (processesHTTPResponse.xhr.status != 200) {
            throw "Error " + processesHTTPResponse.data.statusCode + " : " + processesHTTPResponse.data.errorMessage;
        }

        var processes = processesHTTPResponse.data;
        try {
            for (var i = 0; i < processes.data.length; i++) {
                //retrieve image data of each processor within deployment
                var imageUrl = "";
                if (processes.data[i].diagramResource == null) {
                    imageUrl = "not supported";
                } else {
                    var BPSResponseXML = new XML(wsRequest.getBPMNProcessDiagram(processes.data[i].id));
                    if (log.isDebugEnabled()) {
                        log.debug("Retrieving bpmn process diagram of process " + processes.data[i].id);
                        log.debug('BPS RESPONSE : ' + BPSResponseXML);
                    }
                    if(BPSResponseXML == null || BPSResponseXML == ""){
                       if (log.isDebugEnabled()) {
                           log.debug('Session timed out for request' + wsRequest);
                       }
                       session.put('authSuccess', false);
                       response.sendRedirect('login');
                       throw "HTTPS Session with BPS has timed out";
                    } else {
                        var imageData = BPSResponseXML.toString().split(":return")[1];
                        imageUrl = "data:image/png;base64,"+ imageData.substring(1, imageData.length - 4);
                    }
                    
                    
                }

                var packageName = deploymentList.data[j].name + "-" + deploymentList.data[j].id;
                list.push({
                    processName: processes.data[i].name,
                    processId: processes.data[i].id,
                    packageName: packageName,
                    version: processes.data[i].version,
                    imageUrl: imageUrl
                });
            }
        } catch (err) {
            if (log.isDebugEnabled()) {
                log.debug("Error occurec while retrieving process diagram : "+ err);
            }
            //terminate the outer for loop 
            break;
        }
    }
} catch (e) {
    if (log.isDebugEnabled()) {
        log.error(e);
    }
    //Enable and display error in common error display area in view
    commonErrorMessage = getCommonErrorContent(e);
    errorDisplayEnable = '';
}
//Set current active veiw as process view. 
//This is used to highlight current view which the user currently viewing in the navigation bar
processesNavActive = 'class="active"';
%>
