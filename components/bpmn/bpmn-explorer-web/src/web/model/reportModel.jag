<%/*<!--
 ~ Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
 -->*/%>
<%
var update = request.getParameter("update");
var headers = {"Authorization":"Basic " + auth};
var start = 0;
var isProcessesDeployed = false;

var countOfProcesses = get( httpUrl +"/bpmn/stats/processTaskServices/countOfProcesses" ,null, headers, "json" ).data;
if(countOfProcesses == 0){
    isProcessesDeployed = false;
}
else{
    isProcessesDeployed =true;
}
//list of process definitions belong to the current tenant
// processDefinition name, total process count, completed process count
var processDefinitionList = [];

//Get all deployed processes
var taskListOfCompletedProcess = get( httpUrl +"/bpmn/stats/processTaskServices/allProcesses" ,null, headers, "json" ).data.data;

//Get all users
var userList = get( httpUrl +"/bpmn/stats/userServices/allUsers" ,null, headers, "json" ).data.data;

if (update != null && update === "true") {
    if (option === "processinstancecount" || option === "avgprocessduration" || option === "taskduration") {

        var deployedProcessCount = get( httpUrl +"/bpmn/stats/processTaskServices/deployedProcessCount" ,null, headers, "json" ).data.data;
        var log = new Log();
        var processChart = [];
        for(var i= 0; i < deployedProcessCount.length; i++){
            var processDefinitionId = deployedProcessCount[i].processDefinitionId;
            var processCount = deployedProcessCount[i].deployedProcessCount;
            processChart.push([processDefinitionId, processCount]);
        }

        if (option === "processinstancecount") {    //check whether request for process instance count
            //Filters the 10 processes with the maximum and the minimum process instances
            var pInstanceCount = request.getParameter("id");
            if (pInstanceCount == "min") {
                sortAscending(processChart);
                var orderedProcessList = processChart.slice(0, 10);
                processChart = orderedProcessList;

            } else if (pInstanceCount == "max") {

                sortDescending(processChart);
                var orderedProcessList = processChart.slice(0, 10);
                processChart = orderedProcessList;


            } else if (pInstanceCount == "all") {
                processChart = processChart;

            }

            if (log.isDebugEnabled()) {
                log.debug("Calculate process instance count");
                log.debug("Process Instance Count Chart data : " + stringify(processChart));
            }
        } else if (option === "avgprocessduration") {   //check whether request for process average duration

            var averageDurationOfProcess = get( httpUrl +"/bpmn/stats/processTaskServices/avgDurationToCompleteProcess" ,null, headers, "json" ).data.data;
            var processAvgTimeChart = [];
            for(var i= 0; i < averageDurationOfProcess.length; i++){
                var processDefinitionId = averageDurationOfProcess[i].processDefinitionId;
                var averageTime = averageDurationOfProcess[i].averageTimeForCompletion;
                processAvgTimeChart.push([processDefinitionId, averageTime]);
            }

            //Filters the processes according to the average time durations i.e. 10 processes that finished within a short and a long time
            var selectedProcess = request.getParameter("id");
            if (selectedProcess == "shortTime") {

                sortAscending(processAvgTimeChart);
                var sortedAscendingArray = processAvgTimeChart.slice(0,10);
                processAvgTimeChart = sortedAscendingArray;

            } else if (selectedProcess =="longTime") {

                sortDescending(processAvgTimeChart);
                var sortedDescendingArray = processAvgTimeChart.slice(0,10);
                processAvgTimeChart = sortedDescendingArray;

            } else if (selectedProcess =="allProcesses") {

                processAvgTimeChart = processAvgTimeChart;

            }

            if (log.isDebugEnabled()) {
                log.debug("Calculate average process duration");
                log.debug("Average Time Duration Of Completed Processes Chart data : " + stringify(processAvgTimeChart));
            }
        }

        else if (option === "taskduration") {  //check whether request for Task Durations Of Completed Process

            var x = request.getParameter("id");

            var listOFTasks = get( httpUrl +"/bpmn/stats/processTaskServices/avgTaskDurationForCompletedProcess/"+x ,null, headers, "json" ).data.data;
            var avgTaskForProcess = [];
            if(listOFTasks == null){
            } else {
                for(var i= 0; i < listOFTasks.length; i++){
                    var taskDefinitionKey = listOFTasks[i].taskDefinitionKey;
                    var averageTime = listOFTasks[i].averageTimeForCompletion;
                    avgTaskForProcess.push([taskDefinitionKey, averageTime]);
                }
            }

        }

    } else if (option === "uservstaskscompleted" || option === "uservsavgtime") {

        //User Monitoring START
        //var users = [];
        //Task information related to the user [task count, task duration, average time per task]

        if (option === "uservstaskscompleted") {    //User vs tasks completed uptodate         

            var userVsTasksCompleted = get( httpUrl +"/bpmn/stats/userServices/userVsTaskCount" ,null, headers, "json" ).data.data;
            var  userVsTaskCount = [];
            for(var i= 0; i < userVsTasksCompleted.length; i++){
                var user = userVsTasksCompleted[i].userName;
                var taskCount = userVsTasksCompleted[i].taskCount;
                userVsTaskCount.push([user, taskCount]);
            }

        } else if (option === "uservsavgtime") {    //User vs average time taken to complete tasks

            var userVsTasksDuration = get( httpUrl +"/bpmn/stats/userServices/userVsAvgTimeDuration" ,null, headers, "json" ).data.data;
            var  userAvgTaskTime = [];
            for(var i= 0; i < userVsTasksDuration.length; i++){
                var user = userVsTasksDuration[i].userName;
                var avgTimeDuration = userVsTasksDuration[i].avgTimeDuration;
                userAvgTaskTime.push([user, avgTimeDuration]);
            }

            if (log.isDebugEnabled()) {
                log.debug("User Vs Average Time Taken to Complete Tasks chart data: "+ stringify(userAvgTaskTime));
            }
        }


    } else if (option === "taskvariation" || option === "processvariation" || option === "userperformance") {

        if (option === "taskvariation") {   //Task Demand Variation Over Time i.e. tasks started and completed

            var taskVariationList = get( httpUrl +"/bpmn/stats/processTaskServices/taskVariation" ,null, headers, "json" ).data.data;
            var  tasksOverMonths = [];
            for(var i= 0; i < taskVariationList.length; i++){
                var month = taskVariationList[i].month;
                var startedTasks = taskVariationList[i].startedInstances;
                var completedTasks = taskVariationList[i].completedInstances;
                tasksOverMonths.push([month, startedTasks, completedTasks]);
            }


        } else if (option === "processvariation") { //Process Demand Variation Over Time i.e. processes started and completed


            var processVariationList = get( httpUrl +"/bpmn/stats/processTaskServices/processVariation" ,null, headers, "json" ).data.data;
            var  processesOverMonths = [];
            for(var i= 0; i < processVariationList.length; i++){
                var month = processVariationList[i].month;
                var startedTasks = processVariationList[i].startedInstances;
                var completedTasks = processVariationList[i].completedInstances;
                processesOverMonths.push([month, startedTasks, completedTasks]);
            }


        } else if (option === "userperformance") { //User Performance of Tasks over time i.e. tasks started and completed by the user

            var selectedUser = request.getParameter("id");
            var userTasksOverMonths = [];

            var taskVariationOfUser = get( httpUrl +"/bpmn/stats/userServices/userTaskVariation/"+selectedUser ,null, headers, "json" ).data.data;

            for(var i= 0; i < taskVariationOfUser.length; i++){
                var month = taskVariationOfUser[i].month;
                var startedTasks = taskVariationOfUser[i].startedInstances;
                var completedTasks = taskVariationOfUser[i].completedInstances;
                userTasksOverMonths.push([month, startedTasks, completedTasks]);
            }

        }

    }

}

//Sorts the processes according to the average time duration in ascending order
function sortAscending(processBarChartAvgTime) {
    var length = processBarChartAvgTime.length;
    for(var i = 1; i < length; ++i) {
        var temp = processBarChartAvgTime[i][1];
        var tempName = processBarChartAvgTime[i][0];
        var j = i - 1;
        for(; j >= 0 && processBarChartAvgTime[j][1] > temp; --j) {
            processBarChartAvgTime[j+1][1] = processBarChartAvgTime[j][1];
            processBarChartAvgTime[j+1][0] = processBarChartAvgTime[j][0];
        }
        processBarChartAvgTime[j+1][1] = temp;
        processBarChartAvgTime[j+1][0] = tempName;
    }
}

//Sorts the processes according to the average time duration in descending order
function sortDescending(processBarChartAvgTime) {
    var length = processBarChartAvgTime.length;
    for(var i = 1; i < length; ++i) {
        var temp = processBarChartAvgTime[i][1];
        var tempName = processBarChartAvgTime[i][0];
        var j = i - 1;
        for(; j >= 0 && processBarChartAvgTime[j][1] < temp; --j) {
            processBarChartAvgTime[j+1][1] = processBarChartAvgTime[j][1];
        }
        processBarChartAvgTime[j+1][1] = temp;
        processBarChartAvgTime[j+1][0] = tempName;
    }
}


//Set current active veiw as report view. 
//This is used to highlight current view which the user currently viewing in the navigation bar
reportNavActive = 'class="active"';
%>