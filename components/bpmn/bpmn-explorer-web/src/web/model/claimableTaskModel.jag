<!--
 ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->
<%
var pagination = request.getParameter("pagination");
if (pagination == null || pagination == ""){
	pagination = 1;
}
var start = 0;
if(pagination > 0){
	start = (pagination - 1)*10 ;
}
var headers = {"Authorization":"Basic " + auth};
var user = session.get("user");
var task = [];



//candidateGroups
var groups = "";
for(var j = 0; j < roles.length; j++){
	groups += roles[j];
	if(j + 1 <roles.length){
		groups += ",";
	} 
}

try {
    var tasks = get(httpUrl + "/bpmn/runtime/tasks?candidateUser=" + carbon.server.tenantUser(user).username + "&active=true&sort=id&order=asc&start=" +
                                                                            start + "&size=10&tenantId=" + bpsTenantID, null, headers, "json").data;

    if (log.isDebugEnabled()) {
        log.debug("BPS BPMN REST API request: " + httpUrl + "/bpmn/runtime/tasks?candidateUser=" + user+ 
                                                "&active=true&sort=id&order=asc&start=" + start+ "&size=10&tenantId="+ bpsTenantID);
        log.debug("BPS BPMN REST API response: " + stringify(tasks));
    }

    //Check for error response
    if (tasks.errorMessage != undefined) {
        throw "Error " + tasks.statusCode + " : " + tasks.errorMessage;
    }

    for(var i=0; i < tasks.data.length; i++){
        var taskName = tasks.data[i].name;
        if(taskName == null){ taskName = "Not available"; }
        if(task.indexOf(tasks.data[i].id) == -1)
        task.push({
            id:tasks.data[i].id,
            name:taskName,
        });
    }

    /*
    According to the activiti documentation candidateUser includes both tasks where the user is an explicit candidate
    for and task that are claimable by a group that the user is a member of.
    Hence we do not need to get tasks of candidateGroups which may cause duplicate tasks in claimable task view.
     */
    /*
    tasks = get( httpUrl + "/bpmn/runtime/tasks?candidateGroups=" + groups + "&active=true&sort=id&order=asc&start=" + start + "&size=10" ,null, headers, "json" ).data;

    for(var i=0; i < tasks.data.length; i++){
        var taskName = tasks.data[i].name;
        if(taskName == null){ taskName = "Not available"; }
        if(task.indexOf(tasks.data[i].id) == -1)
        task.push({
            id:tasks.data[i].id,
            name:taskName,
        });
    }

    var taskCount = get( httpUrl + "/bpmn/runtime/tasks?candidateGroups=" + groups + "&active=true" ,null, headers, "json" ).data.total;
    */
    /* COMMENTED SINCE TOTAL TASK COUNT IS RETURED IN ABOVE REST RESPONSE, SINCE NO NEED TO RECALL THIS REST CALL
    var taskCount = get( httpUrl + "/bpmn/runtime/tasks?candidateUser=" + user + "&active=true" ,null, headers, "json" ).data.total;
    var paginatePageCount = Math.ceil(taskCount / 10);
    */
    var paginatePageCount = Math.ceil(tasks.total / 10);

} catch (e) {

    if (log.isDebugEnabled()) {
        log.debug("User Error Occured : " + e);
    }
    //Enable and display error in common error display area in view
    commonErrorMessage = getCommonErrorContent(e);
    errorDisplayEnable = '';
    
}
//Set current active veiw as claimable task view. 
//This is used to highlight current view which the user currently viewing in the navigation bar
claimableTasksNavActive = 'class="active"';
%>
