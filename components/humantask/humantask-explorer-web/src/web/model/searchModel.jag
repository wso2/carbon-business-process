<%
/*
 * Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 * 
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

    var log = new Log();

    //initialize BPS HT service request creator
    var htRequest = require ('/js/WSHTRequest.js');
    htRequest.initHTServerInfo(BPSUrl, session.get('BPSSessionCookie'));

    var requestParameters = request.getAllParameters();
    if (request.getQueryString() != null) {
        //At first request (or without query parameters) no need to load task list
        //process search query
        var queryReceived = true;

        //retrieving parameters getAllParameter to json obj
        var taskName = requestParameters.taskName;
        var taskStatus = requestParameters.taskStatus;
        var taskCategory = requestParameters.taskCategory;
        //var createdDate = requestParameters.craetedDate;
        var queryOrderBy = requestParameters.queryOrderBy;
        var queryOrder = requestParameters.queryOrder;

        if (log.isDebugEnabled()) {
            log.debug("Search query received");
            log.debug("Search query parameters : " + stringify(requestParameters));
        }

        //new query string for pagination
        /*var newQueryString = 'taskName=' +taskName +'&taskStatus=' +taskStatus +'&taskCategory=' +taskCategory
                                +'&craetedDate=' +createdDate +'&queryOrderBy=' +queryOrderBy +'&queryOrder=' +queryOrder;*/

        //Query string without filtering records by created date
           var newQueryString = 'taskName=' +taskName +'&taskStatus=' +taskStatus +'&taskCategory=' +taskCategory
                                        +'&queryOrderBy=' +queryOrderBy +'&queryOrder=' +queryOrder;

        var paginationStr = requestParameters.pagination;
        if (paginationStr == null || paginationStr === "") {
            var pagination = 1;
        } else {
            var pagination = parseInt(paginationStr);
        }

        var pageSize = 10;
        var pageNumber = pagination - 1;

        try {
            var taskXMLList = null;
            var paginatePageCount = 0;
           /* var BPSResponseXML = new XML(htRequest.simpleQueryAdvance(taskStatus, pageSize, pageNumber, taskCategory,
                                                                        queryOrder, queryOrderBy, createdDate, taskName));*/

            var BPSResponseXML = new XML(htRequest.simpleQueryAdvance(taskStatus, pageSize, pageNumber, taskCategory,
                                                                                    queryOrder, queryOrderBy, taskName));
              if(BPSResponseXML == null || BPSResponseXML == ""){
                  if (log.isDebugEnabled()) {
                      log.debug('Session timed out for task'+ "" + taskName);
                  }
                  session.put('authSuccess', false);
                  response.sendRedirect('login');
              }
            if (log.isDebugEnabled()) {
                log.debug('simpleQueryAdvance RESPONSE : ' + BPSResponseXML);
            }

            taskXMLList = BPSResponseXML..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
            paginatePageCount =  parseInt(BPSResponseXML..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);
        } catch (e) {
            log.error('Error occurred while connecting to the back-end BPS HumanTaskClientAPIAdmin service : ');
            log.error(e);
            session.put('authSuccess', false);
            response.sendRedirect('login');
        }
    } else {
        //no need to process search because user haven't enter search data
        var queryReceived = false;
    }

    //Set current active veiw as Search list. 
    //This is used to highlight current view which the user currently viewing in the navigation bar
    searchNavActive = 'class="active"';

%>