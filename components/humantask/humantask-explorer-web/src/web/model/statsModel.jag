<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 * 
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

    var log = new Log();

    //initialize BPS HT service request creator
    var htRequest = require ('/js/WSHTRequest.js');
    htRequest.initHTServerInfo(BPSUrl, session.get('BPSSessionCookie'));
    //Array for the barchart which has the task status and the corresponding task count
    var statusArrayPie=[];
    //Array for the piechart which has the task status and the corresponding task count
    var statusArrayBar=[];

    //Status of Tasks
    var statusReady = "READY";
    var statusCompleted="COMPLETED";
    var statusReserved = "RESERVED";
    var statusSuspended="SUSPENDED";
    var statusInProgress="IN_PROGRESS";
    var statusFailed="FAILED";
    var statusObsolete="OBSOLETE";
    
    var pageSize = 1;
    var pageNumber = 0;

    
    try {
        //List which holds the data for each status of task separately
        var readyTaskList,completedTaskList,reservedTaskList,
            suspendedTaskList,inProgressTaskList,
            failedTaskList,obsoleteTaskList=null;

        //Task Count for each status
        var countReady,countCompleted,countReserved,countSuspended,countInProgress,countFailed,countObsolete=0;
            
        var BPSResponseXMLReady = new XML(htRequest.taskStatusQuery(statusReady,pageSize,pageNumber));
        var BPSResponseXMLCompleted = new XML(htRequest.taskStatusQuery(statusCompleted,pageSize,pageNumber));
        var BPSResponseXMLReserved = new XML(htRequest.taskStatusQuery(statusReserved,pageSize,pageNumber));
        var BPSResponseXMLSuspended = new XML(htRequest.taskStatusQuery(statusSuspended,pageSize,pageNumber));
        var BPSResponseXMLInProgress = new XML(htRequest.taskStatusQuery(statusInProgress,pageSize,pageNumber));
        var BPSResponseXMLFailed = new XML(htRequest.taskStatusQuery(statusFailed,pageSize,pageNumber));
        var BPSResponseXMLObsolete= new XML(htRequest.taskStatusQuery(statusObsolete,pageSize,pageNumber));

       if(BPSResponseXMLReady == null || BPSResponseXMLReady == "" || BPSResponseXMLCompleted == null || BPSResponseXMLCompleted == "" || BPSResponseXMLReserved == null || BPSResponseXMLReserved == "" ||
          BPSResponseXMLSuspended == null || BPSResponseXMLSuspended== "" || BPSResponseXMLInProgress == null ||BPSResponseXMLReady == "" || BPSResponseXMLReady == null || BPSResponseXMLReady == "" ||BPSResponseXMLReady == null || BPSResponseXMLInProgress == "" || BPSResponseXMLFailed == null || BPSResponseXMLFailed == "" ||  BPSResponseXMLObsolete == null || BPSResponseXMLObsolete == ""){

           if (log.isDebugEnabled()) {
               log.debug('Session timed out for request' + htRequest);
           }
           session.put('authSuccess', false);
           response.sendRedirect('login');
       }
        if (log.isDebugEnabled()) {
            log.debug('BPS RESPONSE READY: ' + BPSResponseXMLReady);
            log.debug('BPS RESPONSE COMPLETED: ' + BPSResponseXMLCompleted);
            log.debug('BPS RESPONSE RESERVED: ' + BPSResponseXMLReserved);
            log.debug('BPS RESPONSE SUSPENDED: ' + BPSResponseXMLSuspended);
            log.debug('BPS RESPONSE IN-PROGRESS: ' + BPSResponseXMLInProgress);
            log.debug('BPS RESPONSE FAILED: ' + BPSResponseXMLFailed);
            log.debug('BPS RESPONSE OBSOLETE: ' + BPSResponseXMLObsolete);
        }

        //Getting the response for each task status separately
        readyTaskList = BPSResponseXMLReady..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
        completedTaskList=BPSResponseXMLCompleted..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
        reservedTaskList=BPSResponseXMLReserved..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
        suspendedTaskList=BPSResponseXMLSuspended..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
        inProgressTaskList=BPSResponseXMLInProgress..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
        failedTaskList=BPSResponseXMLFailed..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
        obsoleteTaskList=BPSResponseXMLObsolete..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse.NS2_NS::taskSimpleQueryResultSet.NS1_NS::row;
        
        //Getting the number of tasks per status separately 
        countReady =  parseInt(BPSResponseXMLReady..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse
                                                                        .NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);
        countCompleted =  parseInt(BPSResponseXMLCompleted..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse
                                                                        .NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);
        countReserved =  parseInt(BPSResponseXMLReserved..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse
                                                                        .NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);
        countInProgress =  parseInt(BPSResponseXMLInProgress..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse
                                                                        .NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);
        countSuspended =  parseInt(BPSResponseXMLSuspended..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse
                                                                        .NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);
        countFailed =  parseInt(BPSResponseXMLFailed..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse
                                                                        .NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);
        countObsolete =  parseInt(BPSResponseXMLObsolete..SOAPENV_NS::Body.NS2_NS::simpleQueryResponse        
                                                                        .NS2_NS::taskSimpleQueryResultSet.NS1_NS::pages);

        //Populating the task status and the corresponding task count to draw the barchart
        statusArrayBar.push([statusReady,countReady],[statusCompleted,countCompleted],
                        [statusReserved,countReserved],[statusInProgress,countInProgress],
                        [statusSuspended,countSuspended],[statusFailed,countFailed],
                        [statusObsolete,countObsolete]);

         //Populating the task status and the corresponding task count to draw the piechart
        statusArrayPie.push([statusReady.concat(" (" +countReady+")"),countReady],
                        [statusCompleted.concat(" (" +countCompleted+")"),countCompleted],
                        [statusReserved.concat(" (" +countReserved+")"),countReserved],
                        [statusInProgress.concat(" (" +countInProgress+")"),countInProgress],
                        [statusSuspended.concat(" (" +countSuspended+")"),countSuspended],
                        [statusFailed.concat(" (" +countFailed+")"),countFailed],
                        [statusObsolete.concat(" (" +countObsolete+")"),countObsolete]);
        
    } catch(e) {
        log.error('Error occurred while connecting to the back-end BPS HumanTaskClientAPIAdmin service : ');
        log.error(e);
        session.put('authSuccess', false);
        response.sendRedirect('login');
    }

   // Set current active veiw as myTasks. 
    //This is used to highlight current view which the user currently viewing in the navigation bar
    dashboardNavActive = 'class="active"';
   
%>